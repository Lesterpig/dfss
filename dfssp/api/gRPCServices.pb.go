// Code generated by protoc-gen-go.
// source: gRPCServices.proto
// DO NOT EDIT!

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	gRPCServices.proto

It has these top-level messages:
	RegisterRequest
	ErrorCode
	AuthRequest
	RegisteredUser
	Empty
	PostContractRequest
	JoinSignatureRequest
	ReadySignRequest
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type ErrorCode_Code int32

const (
	// SUCCESS is the error code for a successful request
	ErrorCode_SUCCESS ErrorCode_Code = 0
	// INVARG is the error code for an invalid argument
	ErrorCode_INVARG ErrorCode_Code = 1
	// BADAUTH is the error code for a bad authentication
	ErrorCode_BADAUTH ErrorCode_Code = 2
	// WARNING is the error code for a success state containing a specific warning message
	ErrorCode_WARNING ErrorCode_Code = 3
	// INTERR is the error code for an internal server error
	ErrorCode_INTERR ErrorCode_Code = -1
)

var ErrorCode_Code_name = map[int32]string{
	0:  "SUCCESS",
	1:  "INVARG",
	2:  "BADAUTH",
	3:  "WARNING",
	-1: "INTERR",
}
var ErrorCode_Code_value = map[string]int32{
	"SUCCESS": 0,
	"INVARG":  1,
	"BADAUTH": 2,
	"WARNING": 3,
	"INTERR":  -1,
}

func (x ErrorCode_Code) String() string {
	return proto.EnumName(ErrorCode_Code_name, int32(x))
}
func (ErrorCode_Code) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

// RegisterRequest message contains the client's email adress and his
// request (ie the PEM-encoded certificate request)
type RegisterRequest struct {
	Email   string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	Request string `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
}

func (m *RegisterRequest) Reset()                    { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()               {}
func (*RegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// ErrorCode message contains an error code (see dffs/dfssp/api/errorCodes.go)
// and a message
type ErrorCode struct {
	Code    ErrorCode_Code `protobuf:"varint,1,opt,name=code,enum=api.ErrorCode_Code" json:"code,omitempty"`
	Message string         `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *ErrorCode) Reset()                    { *m = ErrorCode{} }
func (m *ErrorCode) String() string            { return proto.CompactTextString(m) }
func (*ErrorCode) ProtoMessage()               {}
func (*ErrorCode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// AuthRequest message contains the client's email adress and the token used
// for authentication
type AuthRequest struct {
	Email string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	Token string `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
}

func (m *AuthRequest) Reset()                    { *m = AuthRequest{} }
func (m *AuthRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthRequest) ProtoMessage()               {}
func (*AuthRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// RegisteredUser message contains the generated client certificate
// (PEM-encoded)
type RegisteredUser struct {
	ClientCert string `protobuf:"bytes,1,opt,name=clientCert" json:"clientCert,omitempty"`
}

func (m *RegisteredUser) Reset()                    { *m = RegisteredUser{} }
func (m *RegisteredUser) String() string            { return proto.CompactTextString(m) }
func (*RegisteredUser) ProtoMessage()               {}
func (*RegisteredUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// Empty message is an empty message
type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// PostContractRequest message contains the contract as SHA-512 hash, its filename,
// the list of signers as an array of strings, and a comment
type PostContractRequest struct {
	Hash     []byte   `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Filename string   `protobuf:"bytes,2,opt,name=filename" json:"filename,omitempty"`
	Signer   []string `protobuf:"bytes,3,rep,name=signer" json:"signer,omitempty"`
	Comment  string   `protobuf:"bytes,4,opt,name=comment" json:"comment,omitempty"`
}

func (m *PostContractRequest) Reset()                    { *m = PostContractRequest{} }
func (m *PostContractRequest) String() string            { return proto.CompactTextString(m) }
func (*PostContractRequest) ProtoMessage()               {}
func (*PostContractRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// JoinSignatureRequest message contains the contract to join unique identifier
// and the port the client will be listening at
type JoinSignatureRequest struct {
	ContractUuid string `protobuf:"bytes,1,opt,name=contractUuid" json:"contractUuid,omitempty"`
	Port         uint32 `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *JoinSignatureRequest) Reset()                    { *m = JoinSignatureRequest{} }
func (m *JoinSignatureRequest) String() string            { return proto.CompactTextString(m) }
func (*JoinSignatureRequest) ProtoMessage()               {}
func (*JoinSignatureRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

// ReadySignRequest contains the contract unique identitier that is ready to be signed
type ReadySignRequest struct {
	ContractUuid string `protobuf:"bytes,1,opt,name=contractUuid" json:"contractUuid,omitempty"`
}

func (m *ReadySignRequest) Reset()                    { *m = ReadySignRequest{} }
func (m *ReadySignRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadySignRequest) ProtoMessage()               {}
func (*ReadySignRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func init() {
	proto.RegisterType((*RegisterRequest)(nil), "api.RegisterRequest")
	proto.RegisterType((*ErrorCode)(nil), "api.ErrorCode")
	proto.RegisterType((*AuthRequest)(nil), "api.AuthRequest")
	proto.RegisterType((*RegisteredUser)(nil), "api.RegisteredUser")
	proto.RegisterType((*Empty)(nil), "api.Empty")
	proto.RegisterType((*PostContractRequest)(nil), "api.PostContractRequest")
	proto.RegisterType((*JoinSignatureRequest)(nil), "api.JoinSignatureRequest")
	proto.RegisterType((*ReadySignRequest)(nil), "api.ReadySignRequest")
	proto.RegisterEnum("api.ErrorCode_Code", ErrorCode_Code_name, ErrorCode_Code_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Platform service

type PlatformClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*ErrorCode, error)
	Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*RegisteredUser, error)
	Unregister(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ErrorCode, error)
	PostContract(ctx context.Context, in *PostContractRequest, opts ...grpc.CallOption) (*ErrorCode, error)
	JoinSignature(ctx context.Context, in *JoinSignatureRequest, opts ...grpc.CallOption) (*ErrorCode, error)
	ReadySign(ctx context.Context, in *ReadySignRequest, opts ...grpc.CallOption) (*ErrorCode, error)
}

type platformClient struct {
	cc *grpc.ClientConn
}

func NewPlatformClient(cc *grpc.ClientConn) PlatformClient {
	return &platformClient{cc}
}

func (c *platformClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*ErrorCode, error) {
	out := new(ErrorCode)
	err := grpc.Invoke(ctx, "/api.Platform/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformClient) Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*RegisteredUser, error) {
	out := new(RegisteredUser)
	err := grpc.Invoke(ctx, "/api.Platform/Auth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformClient) Unregister(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ErrorCode, error) {
	out := new(ErrorCode)
	err := grpc.Invoke(ctx, "/api.Platform/Unregister", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformClient) PostContract(ctx context.Context, in *PostContractRequest, opts ...grpc.CallOption) (*ErrorCode, error) {
	out := new(ErrorCode)
	err := grpc.Invoke(ctx, "/api.Platform/PostContract", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformClient) JoinSignature(ctx context.Context, in *JoinSignatureRequest, opts ...grpc.CallOption) (*ErrorCode, error) {
	out := new(ErrorCode)
	err := grpc.Invoke(ctx, "/api.Platform/JoinSignature", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformClient) ReadySign(ctx context.Context, in *ReadySignRequest, opts ...grpc.CallOption) (*ErrorCode, error) {
	out := new(ErrorCode)
	err := grpc.Invoke(ctx, "/api.Platform/ReadySign", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Platform service

type PlatformServer interface {
	Register(context.Context, *RegisterRequest) (*ErrorCode, error)
	Auth(context.Context, *AuthRequest) (*RegisteredUser, error)
	Unregister(context.Context, *Empty) (*ErrorCode, error)
	PostContract(context.Context, *PostContractRequest) (*ErrorCode, error)
	JoinSignature(context.Context, *JoinSignatureRequest) (*ErrorCode, error)
	ReadySign(context.Context, *ReadySignRequest) (*ErrorCode, error)
}

func RegisterPlatformServer(s *grpc.Server, srv PlatformServer) {
	s.RegisterService(&_Platform_serviceDesc, srv)
}

func _Platform_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PlatformServer).Register(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Platform_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PlatformServer).Auth(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Platform_Unregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PlatformServer).Unregister(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Platform_PostContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(PostContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PlatformServer).PostContract(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Platform_JoinSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(JoinSignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PlatformServer).JoinSignature(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Platform_ReadySign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ReadySignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PlatformServer).ReadySign(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Platform_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Platform",
	HandlerType: (*PlatformServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Platform_Register_Handler,
		},
		{
			MethodName: "Auth",
			Handler:    _Platform_Auth_Handler,
		},
		{
			MethodName: "Unregister",
			Handler:    _Platform_Unregister_Handler,
		},
		{
			MethodName: "PostContract",
			Handler:    _Platform_PostContract_Handler,
		},
		{
			MethodName: "JoinSignature",
			Handler:    _Platform_JoinSignature_Handler,
		},
		{
			MethodName: "ReadySign",
			Handler:    _Platform_ReadySign_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 490 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x53, 0x5d, 0x8f, 0xd2, 0x40,
	0x14, 0xdd, 0x42, 0x97, 0x8f, 0xbb, 0x2c, 0x36, 0x03, 0x9a, 0xca, 0x83, 0xd9, 0xcc, 0x8b, 0xc6,
	0x07, 0x34, 0x68, 0x4c, 0x34, 0xbe, 0xd4, 0x4a, 0xd6, 0xf5, 0x81, 0x90, 0xe9, 0x56, 0x9f, 0x6b,
	0xb9, 0x0b, 0x8d, 0xb4, 0x83, 0xd3, 0x41, 0xb3, 0x7f, 0xc6, 0x3f, 0xe4, 0x8f, 0xd2, 0xce, 0xb4,
	0x43, 0xa8, 0x36, 0x26, 0xcb, 0x03, 0xcc, 0xb9, 0x1f, 0xe7, 0xde, 0x39, 0x67, 0x00, 0xb2, 0x66,
	0x4b, 0x3f, 0x40, 0xf1, 0x3d, 0x89, 0x31, 0x9f, 0xee, 0x04, 0x97, 0x9c, 0xb4, 0xa3, 0x5d, 0x42,
	0x3d, 0xb8, 0xc7, 0x70, 0x9d, 0xe4, 0x12, 0x05, 0xc3, 0x6f, 0x7b, 0xcc, 0x25, 0x19, 0xc3, 0x29,
	0xa6, 0x51, 0xb2, 0x75, 0xad, 0x0b, 0xeb, 0x49, 0x9f, 0x95, 0x80, 0xb8, 0xd0, 0x15, 0x65, 0x81,
	0xdb, 0xd2, 0x71, 0x03, 0xe9, 0x4f, 0x0b, 0xfa, 0x73, 0x21, 0xb8, 0xf0, 0xf9, 0x0a, 0xc9, 0x63,
	0xb0, 0xe3, 0xe2, 0x57, 0x37, 0x0f, 0x67, 0xa3, 0x69, 0x31, 0x64, 0x7a, 0xc8, 0x4e, 0xd5, 0x17,
	0xd3, 0x05, 0x8a, 0x30, 0xc5, 0x3c, 0x8f, 0xd6, 0x68, 0x08, 0x2b, 0x48, 0x17, 0x60, 0x6b, 0xaa,
	0x33, 0xe8, 0x06, 0xa1, 0xef, 0xcf, 0x83, 0xc0, 0x39, 0x21, 0x00, 0x9d, 0xab, 0xc5, 0x27, 0x8f,
	0x5d, 0x3a, 0x96, 0x4a, 0xbc, 0xf3, 0xde, 0x7b, 0xe1, 0xf5, 0x07, 0xa7, 0xa5, 0xc0, 0x67, 0x8f,
	0x2d, 0xae, 0x16, 0x97, 0x4e, 0x9b, 0x8c, 0x54, 0xd5, 0xf5, 0x9c, 0x31, 0xe7, 0xb7, 0xf9, 0x58,
	0xf4, 0x35, 0x9c, 0x79, 0x7b, 0xb9, 0xf9, 0xff, 0xfd, 0x8a, 0xa8, 0xe4, 0x5f, 0x31, 0xab, 0x96,
	0x29, 0x01, 0x7d, 0x0e, 0x43, 0x23, 0x0f, 0xae, 0xc2, 0x1c, 0x05, 0x79, 0x04, 0x10, 0x6f, 0x13,
	0xcc, 0xa4, 0x8f, 0x42, 0x56, 0x14, 0x47, 0x11, 0xda, 0x85, 0xd3, 0x79, 0xba, 0x93, 0xb7, 0xf4,
	0x07, 0x8c, 0x96, 0x3c, 0x97, 0x3e, 0xcf, 0xa4, 0x88, 0x62, 0x69, 0xa6, 0x13, 0xb0, 0x37, 0x51,
	0xbe, 0xd1, 0x9d, 0x03, 0xa6, 0xcf, 0x64, 0x02, 0xbd, 0x9b, 0x64, 0x8b, 0x59, 0x94, 0x1a, 0x2d,
	0x0e, 0x98, 0x3c, 0x80, 0x4e, 0x9e, 0xac, 0x33, 0x14, 0x6e, 0xfb, 0xa2, 0x5d, 0x64, 0x2a, 0xa4,
	0xe4, 0x8b, 0x79, 0x9a, 0x16, 0x63, 0x5d, 0xbb, 0x94, 0xaf, 0x82, 0x85, 0x7c, 0xe3, 0x8f, 0x3c,
	0xc9, 0x82, 0xa2, 0x2e, 0x92, 0x7b, 0x81, 0x66, 0x32, 0x85, 0x41, 0x5c, 0x2d, 0x13, 0xee, 0x93,
	0x55, 0xb5, 0x7b, 0x2d, 0xa6, 0xb6, 0xdb, 0x71, 0x51, 0x5a, 0x7c, 0xce, 0xf4, 0x99, 0xbe, 0x02,
	0x87, 0x61, 0xb4, 0xba, 0x55, 0x84, 0x77, 0xe0, 0x9a, 0xfd, 0x6a, 0x41, 0x6f, 0xb9, 0x8d, 0xe4,
	0x0d, 0x17, 0x29, 0x99, 0x41, 0xcf, 0x08, 0x49, 0xc6, 0xfa, 0x51, 0xfc, 0xf5, 0xec, 0x26, 0xc3,
	0xfa, 0x53, 0xa1, 0x27, 0xe4, 0x19, 0xd8, 0xca, 0x37, 0xe2, 0xe8, 0xcc, 0x91, 0x85, 0x93, 0x51,
	0x8d, 0xa1, 0x74, 0xa6, 0x68, 0x78, 0x0a, 0x10, 0x66, 0xc2, 0x8c, 0x81, 0x92, 0x50, 0x99, 0xd1,
	0x40, 0xfe, 0x06, 0x06, 0xc7, 0xf6, 0x10, 0x57, 0x57, 0x34, 0x38, 0xd6, 0xd0, 0xfb, 0x16, 0xce,
	0x6b, 0x0a, 0x93, 0x87, 0xba, 0xa4, 0x49, 0xf5, 0x86, 0xee, 0x97, 0xd0, 0x3f, 0xe8, 0x49, 0xee,
	0x57, 0x37, 0xa9, 0xeb, 0xfb, 0x6f, 0xd7, 0x97, 0x8e, 0xfe, 0xd3, 0xbe, 0xf8, 0x13, 0x00, 0x00,
	0xff, 0xff, 0x35, 0x7d, 0xdf, 0xdc, 0xca, 0x03, 0x00, 0x00,
}
