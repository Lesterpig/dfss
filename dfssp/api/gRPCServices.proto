syntax = "proto3";

package api;

service Platform {
	rpc Register(RegisterRequest) returns (ErrorCode) {}
	rpc Auth(AuthRequest) returns (RegisteredUser) {}
	rpc Unregister(Empty) returns (ErrorCode) {}
	rpc PostContract(PostContractRequest) returns (ErrorCode) {}
	rpc JoinSignature(JoinSignatureRequest) returns (ErrorCode) {}
	rpc ReadySign(ReadySignRequest) returns (ErrorCode) {}
}

// RegisterRequest message contains the client's email adress and his
// request (ie the PEM-encoded certificate request)
message RegisterRequest {
	string email = 1;
	string request = 2;
}

// ErrorCode message contains an error code (see dffs/dfssp/api/errorCodes.go)
// and a message
message ErrorCode {
	enum Code {
		// SUCCESS is the error code for a successful request
		SUCCESS = 0;
		// INVARG is the error code for an invalid argument
		INVARG = 1;
		// BADAUTH is the error code for a bad authentication
		BADAUTH = 2;
		// WARNING is the error code for a success state containing a specific warning message
		WARNING = 3;
		// INTERR is the error code for an internal server error
		INTERR = -1;
	}
	Code code = 1;
	string message = 2;
}

// AuthRequest message contains the client's email adress and the token used
// for authentication
message AuthRequest {
	string email = 1;
	string token = 2;
}

// RegisteredUser message contains the generated client certificate
// (PEM-encoded)
message RegisteredUser {
	string clientCert = 1;
}

// Empty message is an empty message
message Empty {
}

// PostContractRequest message contains the contract as SHA-512 hash, its filename,
// the list of signers as an array of strings, and a comment
message PostContractRequest {
	string hash = 1;
	string filename = 2;
	repeated string signer = 3;
	string comment = 4;
}

// JoinSignatureRequest message contains the contract to join unique identifier
// and the port the client will be listening at
message JoinSignatureRequest {
	string contractUuid = 1;
	uint32 port = 2;
}

// ReadySignRequest contains the contract unique identitier that is ready to be signed
message ReadySignRequest {
	string contractUuid = 1;
}
