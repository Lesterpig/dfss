/// Protobuf definitions for dfssp
syntax = "proto3";

package api;

/// Procedures offered by dfssp
service Platform {
	/// Register a new user, no authentication required.
	rpc Register(RegisterRequest) returns (ErrorCode) {}
	/// Authenticate a previously registered user, no authentication required.
	rpc Auth(AuthRequest) returns (RegisteredUser) {}
	/// Unregister a new user, authentication required.
	rpc Unregister(Empty) returns (ErrorCode) {}
	/// Create a new contract, authentication required.
	rpc PostContract(PostContractRequest) returns (ErrorCode) {}
	/// Fetch a previously create contract, authentication required.
	rpc GetContract(GetContractRequest) returns (Contract) {}
	/// Join a signature discovery room, authentication required.
	// The stream is triggered for each new user connected in this channel.
	rpc JoinSignature(JoinSignatureRequest) returns (stream UserConnected) {}
	/// Join an ignition room, authentication required.
	// The response is returned when every signer is ready for a specific contract.
	// Warning, can me answered with a very high delay.
	rpc ReadySign(ReadySignRequest) returns (LaunchSignature) {}
}

message RegisterRequest {
	/// User mail
	string email = 1;
	/// Certificate request (CSR) as PEM
	string request = 2;
}

/// ErrorCode message contains an error code and a message.
//
// Above or zero : target-side error
//
// Less than 0   : local error
message ErrorCode {
	enum Code {
		/// the error code for a successful request
		SUCCESS = 0;
		/// the error code for an invalid argument
		INVARG = 1;
		/// the error code for a bad authentication
		BADAUTH = 2;
		/// the error code for a success state containing a specific warning message
		WARNING = 3;
		/// the error code for an internal server error
		INTERR = -1;
		/// the error code for a timeout or unreacheable target
		TIMEOUT = -2;
	}
	Code code = 1;
	/// An additional message, if needed
	string message = 2;
}

message AuthRequest {
	/// User email
	string email = 1;
	/// User authentication token
	string token = 2;
}

message RegisteredUser {
	/// User certificate, as generated by the platform (PEM)
	string clientCert = 1;
}

/// An empty message, used when no parameters are required for a query or an answer.
message Empty {
}

message PostContractRequest {
	/// Contract SHA-512 hash
	bytes hash = 1;
	/// Contract filename
	string filename = 2;
	/// List of signers emails
	repeated string signer = 3;
	/// Additional comment
	string comment = 4;
}

message GetContractRequest {
	/// UUID of the requested contract
	string uuid = 1;
}

/// The fetched contract when using GetContract
message Contract {
	/// The result code
	ErrorCode errorCode = 1;
	/// The JSON object of the contract, equivalent to the one that was sent by mail to signers
	bytes json = 2;
}

message JoinSignatureRequest {
	/// The contract UUID to join
	string contractUuid = 1;
	/// The open port for P2P communication of the client
	uint32 port = 2;
}

/// UserConnected is emitted by the platform to the client to announce a new client connection, through a stream.
// Previously connected clients are also emitted one by one just after the beginning of the stream.
message UserConnected {
	/// The result code.
	// Very bad if not equals to SUCCESS, in this case the client should close the connection
	ErrorCode errorCode = 1;
	/// A confirmation about the contract UUID
	string contractUuid = 2;
	/// One user connecting to this contract's room
	User user = 3;
}

message User {
	/// The certificate hash of the user
	bytes keyHash = 1;
	string email = 2;
	/// The IP offered by the user for P2P
	string ip = 3;
	/// The port offered by the user for P2P
	uint32 port = 4;
}

message ReadySignRequest {
	/// The contract UUID to be ready for
	string contractUuid = 1;
}

/// LaunchSignature is emitted by the platform when every signers of a specific contract are ready.
message LaunchSignature {
	/// The result code
	ErrorCode errorCode = 1;
	/// The unique signature generated by the platform for this specific signature attempt
	string signatureUuid = 2;
	/// The SHA-512 hash of the contract document
	bytes documentHash = 3;
	/// A confirmation of client hashes for communication authentication
	repeated bytes keyHash = 4;
	/// The signing sequence generated on-the-fly by the platform
	repeated uint32 sequence = 5;
	/// The cryptographic object of the signature of this structure (seal and errorCode excepted) by the platform, for data certification.
	/// The signature is computed using auth.SignStructure function:
	/// PKCS1v15 + SHA512 hash of the string representation of the structure
	bytes seal = 6;
}
