// Code generated by protoc-gen-go.
// source: demonstrator.proto
// DO NOT EDIT!

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	demonstrator.proto

It has these top-level messages:
	Log
	Ack
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Log message to display information
type Log struct {
	Timestamp  int64  `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Identifier string `protobuf:"bytes,2,opt,name=identifier" json:"identifier,omitempty"`
	Log        string `protobuf:"bytes,3,opt,name=log" json:"log,omitempty"`
}

func (m *Log) Reset()                    { *m = Log{} }
func (m *Log) String() string            { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()               {}
func (*Log) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Empty ack message
type Ack struct {
}

func (m *Ack) Reset()                    { *m = Ack{} }
func (m *Ack) String() string            { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()               {}
func (*Ack) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*Log)(nil), "api.Log")
	proto.RegisterType((*Ack)(nil), "api.Ack")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Demonstrator service

type DemonstratorClient interface {
	// Log message.
	//
	// Send the UnixNano timetamp, sender's identifier and log message
	// Returns nothing ?
	SendLog(ctx context.Context, in *Log, opts ...grpc.CallOption) (*Ack, error)
}

type demonstratorClient struct {
	cc *grpc.ClientConn
}

func NewDemonstratorClient(cc *grpc.ClientConn) DemonstratorClient {
	return &demonstratorClient{cc}
}

func (c *demonstratorClient) SendLog(ctx context.Context, in *Log, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := grpc.Invoke(ctx, "/api.Demonstrator/SendLog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Demonstrator service

type DemonstratorServer interface {
	// Log message.
	//
	// Send the UnixNano timetamp, sender's identifier and log message
	// Returns nothing ?
	SendLog(context.Context, *Log) (*Ack, error)
}

func RegisterDemonstratorServer(s *grpc.Server, srv DemonstratorServer) {
	s.RegisterService(&_Demonstrator_serviceDesc, srv)
}

func _Demonstrator_SendLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Log)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(DemonstratorServer).SendLog(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Demonstrator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Demonstrator",
	HandlerType: (*DemonstratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendLog",
			Handler:    _Demonstrator_SendLog_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 148 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x4a, 0x49, 0xcd, 0xcd,
	0xcf, 0x2b, 0x2e, 0x29, 0x4a, 0x2c, 0xc9, 0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62,
	0x4e, 0x2c, 0xc8, 0x54, 0xb2, 0xe4, 0x62, 0xf6, 0xc9, 0x4f, 0x17, 0x12, 0xe4, 0xe2, 0x2c, 0xc9,
	0xcc, 0x4d, 0x2d, 0x2e, 0x49, 0xcc, 0x2d, 0x90, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x16, 0x12, 0xe2,
	0xe2, 0xca, 0x4c, 0x49, 0xcd, 0x2b, 0xc9, 0x4c, 0xcb, 0x4c, 0x2d, 0x92, 0x60, 0x02, 0x8a, 0x71,
	0x0a, 0x71, 0x73, 0x31, 0xe7, 0xe4, 0xa7, 0x4b, 0x30, 0x83, 0x38, 0x4a, 0xac, 0x5c, 0xcc, 0x8e,
	0xc9, 0xd9, 0x46, 0xfa, 0x5c, 0x3c, 0x2e, 0x48, 0x86, 0x0b, 0xc9, 0x73, 0xb1, 0x07, 0xa7, 0xe6,
	0xa5, 0x80, 0x4c, 0xe5, 0xd0, 0x03, 0x5a, 0xa1, 0x07, 0x64, 0x49, 0x41, 0x58, 0x40, 0xe5, 0x4a,
	0x0c, 0x49, 0x6c, 0x60, 0xeb, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x0a, 0xd5, 0xa7, 0xa4,
	0x94, 0x00, 0x00, 0x00,
}
