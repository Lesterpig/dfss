// Code generated by protoc-gen-go.
// source: test.proto
// DO NOT EDIT!

/*
Package fixtures is a generated protocol buffer package.

It is generated from these files:
	test.proto

It has these top-level messages:
	Hop
*/
package fixtures

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Hop struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *Hop) Reset()                    { *m = Hop{} }
func (m *Hop) String() string            { return proto.CompactTextString(m) }
func (*Hop) ProtoMessage()               {}
func (*Hop) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func init() {
	proto.RegisterType((*Hop)(nil), "fixtures.Hop")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Test service

type TestClient interface {
	Ping(ctx context.Context, in *Hop, opts ...grpc.CallOption) (*Hop, error)
}

type testClient struct {
	cc *grpc.ClientConn
}

func NewTestClient(cc *grpc.ClientConn) TestClient {
	return &testClient{cc}
}

func (c *testClient) Ping(ctx context.Context, in *Hop, opts ...grpc.CallOption) (*Hop, error) {
	out := new(Hop)
	err := grpc.Invoke(ctx, "/fixtures.Test/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Test service

type TestServer interface {
	Ping(context.Context, *Hop) (*Hop, error)
}

func RegisterTestServer(s *grpc.Server, srv TestServer) {
	s.RegisterService(&_Test_serviceDesc, srv)
}

func _Test_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Hop)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(TestServer).Ping(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Test_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fixtures.Test",
	HandlerType: (*TestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Test_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 101 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x49, 0x2d, 0x2e,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x48, 0xcb, 0xac, 0x28, 0x29, 0x2d, 0x4a, 0x2d,
	0x56, 0x12, 0xe5, 0x62, 0xf6, 0xc8, 0x2f, 0x10, 0xe2, 0xe3, 0x62, 0xca, 0x4c, 0x91, 0x60, 0x54,
	0x60, 0xd4, 0x60, 0x0d, 0x02, 0xb2, 0x8c, 0xf4, 0xb8, 0x58, 0x42, 0x80, 0xca, 0x85, 0xd4, 0xb8,
	0x58, 0x02, 0x32, 0xf3, 0xd2, 0x85, 0x78, 0xf5, 0x60, 0x3a, 0xf4, 0x80, 0xca, 0xa5, 0x50, 0xb9,
	0x4a, 0x0c, 0x49, 0x6c, 0x60, 0x73, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa9, 0x6e, 0xee,
	0x4e, 0x65, 0x00, 0x00, 0x00,
}
